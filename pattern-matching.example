brand-name { "Firefox" }

brand-name {
  |Firefox
}

-local-message { "This won't be considered by compare-locales." }

brand-name {
  -gender :feminine
  -animate FALSE
  "Aurora"
}

brand-name {
  -gender :masculine
  MATCH $1 {
    :nominative OR NONE -> "Firefox"
    :accusative         -> "Firefoksa"
  }
}

about-brand-name { "About { brand-name :accusative }" }

html-welcome {
  |Welcome to <a>{ brand-name }</a>, the free and open source operating system 
  |from Mozilla. Our mission is to promote openness, innovation and 
  |opportunity by keeping the power of the Web in your hands.
}

crashed {
  MATCH brand-name -gender {
    :masculine -> "{ brand-name } uległ awarii"
    :feminine  -> "{ brand-name } uległa awarii"
  }
}

space-available {
  MATCH NUMBER_PLURAL $num {
    :one  -> "{ $num }{ byte-unit $unit } disponible"
    :many -> "{ $num }{ byte-unit $unit } disponibles"
  }
}

byte-unit {
  MATCH $1 {
    "B"  -> "o"
    "KB" -> "Ko"
    "MB" -> "Mo"
    "GB" -> "Go"
    ANY  -> "Oops"
  }
}

plural1 {
  MATCH $1 {
    1                              -> :one
    ANY WHEN $1 % 100 IN (10..19)  -> :other
    ANY WHEN $1 % 10 IN (2..4)     -> :few
    ANY                            -> :other
  }
}

plural2 {
  MATCH (num, tens, hundreds) {
    (1, ANY, ANY)         -> :one
    (ANY, ANY, (10..19))  -> :other
    (ANY, (2..4), ANY)    -> :few
    ANY                   -> :other
  } WHERE {
    num      = $1
    tens     = num % 10
    hundreds = num % 100
  }
}


-- Anna likes your photo
-- Anna and Nick like your photo
-- Anna and 6 other people like your photo
-- Anna, Nick and 1 other person like your photo
-- Anna, Nick and 5 other people like your photo

like1 {
  MATCH NUMBER_PLURAL (LIST_LENGTH $names + $num) {
    :one ->
      "{ LIST_FIRST $names } likes your photo"
    :other -> MATCH NUMBER_PLURAL $num {
      ANY WHEN $num = 0 ->
        "{ LIST_FORMAT $names } like your photo"
      :one ->
        "{ LIST_FORMAT $names "1 other person" } like your photo"
      :other ->
        "{ LIST_FORMAT $names "{ $num } other people" } like your photo"
  }
}

like2 {
  MATCH (
    NUMBER_PLURAL (LIST_LENGTH $names + $num),
    NUMBER_PLURAL $num
  ) {
    (:one, ANY) ->
      |{ LIST_FIRST $names } likes your photo
    (:other, ANY) WHEN $num = 0 ->
      |{ LIST_FORMAT $names } like your photo
    (:other, :one) ->
      |{ LIST_FORMAT $names "1 other person" } like your photo
    (:other, :other) ->
      |{ LIST_FORMAT $names "{ $num } other people" } like your photo
  }
}

like3 {

  MATCH (
    NUMBER_PLURAL num-friends,
    NUMBER_PLURAL num-strangers
  ) {

    (:one, ANY) WHEN num-strangers = 0 ->
      |{ first } likes your photo

    (ANY, :one) WHEN num-friends = 0 ->
      |1 person likes your photo

    (ANY, ANY) ->
      |{ (first, second, other-people) } like your photo

  } WHERE {

    (first, second, ...rest) = $friends
    num-hidden-friends       = LIST_LENGTH rest
    num-friends              = LIST_LENGTH $friends
    num-strangers            = LIST_LENGTH $strangers

    other-people = MATCH (total, NUMBER_PLURAL total) {
      (0, ANY)        -> NONE
      (ANY, :one)     -> "1 other person"
      (ANY, :other)   -> "{ total } other people"
    } WHERE {
      total = num-hidden-friends + num-strangers
    }
  }
}
