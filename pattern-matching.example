brand-name { "Firefox" }

brand-name {
  |Firefox
}

-local-message { "This won't be considered by compare-locales." }

brand-name {
  ^gender  = :feminine
  ^animate = FALSE
  "Aurora"
}

brand-name {
  ^gender = :masculine
  MATCH $1 {
    :nominative OR NONE -> "Firefox"
    :accusative         -> "Firefoksa"
  }
}

about-brand-name { "About { :accusative >> brand-name }" }

html-welcome {
  |Welcome to <a>{ brand-name }</a>, the free and open source operating system 
  |from Mozilla. Our mission is to promote openness, innovation and 
  |opportunity by keeping the power of the Web in your hands.
}

crashed {
  MATCH brand-name << ^gender {
    :masculine -> "{ brand-name } uległ awarii"
    :feminine  -> "{ brand-name } uległa awarii"
  }
}

space-available {
  MATCH NUMBER_PLURAL << $num {
    :one  -> "{ $num }{ -byte-unit << $unit } disponible"
    :many -> "{ $num }{ -byte-unit << $unit } disponibles"
  }
}

-byte-unit {
  MATCH $1 {
    "B"  -> "o"
    "KB" -> "Ko"
    "MB" -> "Mo"
    "GB" -> "Go"
    _    -> "Oops"
  }
}

space-available-intl1 {
  MATCH $num >> NUMBER_PLURAL {
    :one  -> "{ UNIT DIGITAL SHORT << $num } disponible"
    :many -> "{ UNIT DIGITAL SHORT << $num } disponibles"
  }
}

space-available-intl2 {
  MATCH $num >> NUMBER_PLURAL {
    :one  -> "{ unit } disponible"
    :many -> "{ unit } disponibles"
  } WHERE {
    unit = $num >> UNIT DIGITAL AUTO SHORT
  }
}


plural1 {
  MATCH $1 {
    1                          -> :one
    _ WHEN $1 % 100 IN 10..19  -> :other
    _ WHEN $1 % 10 IN 2..4     -> :few
    _                          -> :other
  }
}

plural2 {
  MATCH num, tens, hundreds {
    1, ...       -> :one
    ..., 10..19  -> :other
    _, 2..4, _   -> :few
    _            -> :other
  } WHERE {
    num      = $1
    tens     = num % 10
    hundreds = num % 100
  }
}


-- Anna likes your photo
-- Anna and Nick like your photo
-- Anna and 6 other people like your photo
-- Anna, Nick and 1 other person like your photo
-- Anna, Nick and 5 other people like your photo

like1 {
  MATCH $names >> LIST_LENGTH + $num >> NUMBER_PLURAL {
    :one ->
      "{ first } likes your photo"
    :other -> MATCH $num >> NUMBER_PLURAL {
      _ WHEN $num == 0 ->
        "{ $names } like your photo"
      :one ->
        "{ ...$names, "1 other person" } like your photo"
      :other ->
        "{ ...$names, "{ $num } other people" } like your photo"
  } WHERE {
    first, ... = $names
  }
}

like2 {
  MATCH
    NUMBER_PLURAL << $names >> LIST_LENGTH + $num,
    NUMBER_PLURAL << $num
  {
    :one, _ ->
      |{ first } likes your photo
    :other, _ WHEN $num == 0 ->
      |{ names } like your photo
    :other, :one ->
      |{ ...$names,  "1 other person" } like your photo
    :other, :other ->
      |{ ...$names "{ $num } other people" } like your photo
  } WHERE {
    first, ... = $names
  }
}

like3 {
  MATCH
    NUMBER_PLURAL << total
  {
    :one WHEN first ->
      |{ first } likes your photo
    :one ->
      |1 person likes your photo
    _ ->
      |{ first, second, other-people } like your photo
  } WHERE {
    first, second, ...rest = $friends
    total                  = (...$friends, ...$strangers) >> LIST_LENGTH
    other-people           = MATCH total >> NUMBER_PLURAL {
      _ WHEN total = 0 -> NONE
      :one             -> "1 other person"
      :other           -> "{ total } other people"
    } WHERE {
      total = (...rest, ...$strangers) >> LIST_LENGTH
    }
  }
}

apples {
  MATCH $num >> NUMBER_PLURAL {
    :one   -> "An apple"
    :other -> "{ $num } apples"
  }
}
