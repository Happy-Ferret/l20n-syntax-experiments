body                 ::= (__ entry NL)* (__ entry)? EOF;
entry                ::= comment
                      | message
                      ;

comment              ::= '#' .*;
__                   ::= [ \t]*
NL                   ::= [\r\n]+

identifier           ::= [a-zA-Z_.?-] ([a-zA-Z0-9_.?-])*;
variable             ::= '$' identifier;
keyword              ::= [^=|#{}\[\]()]+;
builtin              ::= [A-Z_.?-]+;
number               ::= [0-9]+ ('.' [0-9]+)?;
member               ::= '*'? '[' keyword ']' __ pattern NL;

message              ::= identifier __ value? __ trait*;
value                ::= '=' __ pattern;
trait                ::= member;

pattern              ::= unquoted-pattern
                      |  quoted-pattern
                      ;
unquoted-pattern     ::= (unquoted-text | placeable | block-text)+;
quoted-pattern       ::= '"' (quoted-text | placeable)+ '"';
unquoted-text        ::= ([^{] | '\{')*;
quoted-text          ::= ([^{"] | '\{' | '\"')*;
block-text           ::= NL __ '|' unquoted-pattern;

placeable            ::= '{' __ placeable-list __ '}';
placeable-list       ::= placeable-expression (__ ',' __ placeable-list)?;
placeable-expression ::= expression
                      |  select-expression
                      ;
expression           ::= quoted-pattern
                      |  number
                      |  identifier
                      |  variable-reference
                      |  call-expression
                      |  member-expression
                      ;
select-expression    ::= expression __ ' ->' __ NL variant+;
variant              ::= member;

call-expression      ::= builtin '(' __ arglist? __ ')';
arglist              ::= argument (__ ',' __ arglist)?;
argument             ::= expression
                      |  keyword-argument;
keyword-argument     ::= identifier __ '=' __ quoted-pattern;

member-expression    ::= identifier '[' keyword ']';
